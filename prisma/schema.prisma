generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int       @id @default(autoincrement())
  user_email String? // @unique @db.Char(20) // 이메일이 유니크여야 하는데 카카오랑 애플에서 받아올 수 잇는지 확인
  user_pwd   String?
  user_nick  String @db.Char(20)
  user_grade Int      @default(0) // 0: 비회원, 1: 아이디 비번, 2:카카오, 3: 애플
  user_status Int @default(0) // 0: 정상활동 유저, 1: 탈퇴회원 -> 재가입 불가능
  user_refreshtoken String?
  user_like_staId Int @default(0) // 유저가 팬인 팀의 홈 구장, 디폴트 id 0: 아직 팬 설정 안함
  
  stadium Stadium @relation(fields: [user_like_staId], references: [sta_id])

  favorits  Favorit[]
  messages Message[]
  ChatRoom ChatRoom[]

  AnonyUser AnonyUser[]
  AppleUSer AppleUSer[]
}

// 비회원이면 디바이스 정보 받아오기
model AnonyUser{
  ano_id Int @id @default(autoincrement())
  ano_uuid String @unique
  userID Int @unique
  user User @relation(fields: [userID], references: [user_id])

}


// 애플 유저, 로그인 탈퇴에 필요한 데이터 따로 보관
model AppleUSer{
  app_user_id Int @id @default(autoincrement())
  
  userID Int @unique
  user User @relation(fields: [userID], references: [user_id])
}

model Favorit {
  fav_id  Int     @id @default(autoincrement())
  fa_user_id Int
  fa_sta_id  Int

  stadium Stadium @relation(fields: [fa_sta_id], references: [sta_id], map: "fk_favorit_to_stadium")
  user    User    @relation(fields: [fa_user_id], references: [user_id], map: "fk_favorit_to_user")

}

model Stadium {
  sta_id         Int    @id @default(autoincrement())
  sta_image      String
  sta_lati       Float
  sta_long       Float
  sta_name        String // 구장이름
  sta_team        String // 팀명


  Favorit        Favorit[]
  Recommendation Recommendation[] @relation("StadiumRecommendations")
  Cafeteria      Cafeteria[]

  User User[]
}



// 추천맛집
model Recommendation {
  reco_id   Int       @id @default(autoincrement())
  reco_name String
  reco_image String
  reco_player String

  // 추가
  reco_add String // 주소
  reco_tp String // 전화번호
  reco_menu String // 대표메뉴

  reco_stadiumId Int
  stadium   Stadium @relation(fields: [reco_stadiumId], references: [sta_id], name: "StadiumRecommendations")
}

// 구내 식당
model Cafeteria {
  cafe_id   Int       @id @default(autoincrement())
  cafe_name String
  cafe_image String
  cafe_location String // 위치 3루2층 == 3ru_2f
  cafe_category String // 음식 카테고리
  cafe_stadiumId Int
  stadium   Stadium @relation(fields: [cafe_stadiumId], references: [sta_id])
}

// 주차장 정보도 저장해서 해야함
// model ParkingLot {
//   park_id   Int       @id @default(autoincrement())
//   park_name String
//   park_lati Float
//   park_long Float
//   stadiumId Int
//   stadium   Stadium @relation(fields: [stadiumId], references: [sta_id])
// }

// 선발투수 정보
model StartPitcher{
  id Int @id @default(autoincrement())
  pit_game_id String // 게임아이디
  pit_home_team String // 홈 구장 팀이름
  pit_home_name String // 홈 구장 선수 이름
  pit_home_image String // 홈 구장 선수 이미지
  pit_away_name String // 상대선수 이름
  pit_away_team String // 상대선수 팀이름
  pit_away_image String // 상대선수 이미지
  pit_game_time String // 경기 시작시간
  pit_broad_image String //  날씨 이미지
  createdAt DateTime @default(now())
}


model ChatRoom {
  id       Int       @id @default(autoincrement())
  name     String
  messages Message[]
  users    User[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  userId     Int
  user       User     @relation(fields: [userId], references: [user_id])
}

